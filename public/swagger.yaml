openapi: 3.0.0
info:
  title: AsheerSupport
  description: >-
    The Asher Support API is a backend system designed to provide support
    functionality for the Asher application. It allows users to manage tasks,
    register and authenticate users, and retrieve support information. The API
    is built using Node.js, Express, and Prisma, and it communicates with a
    PostgreSQL database to store and retrieve data.


    The {{host}} is currently
    [https://sunny-empathy-production.up.railway.app](https://sunny-empathy-production.up.railway.app)
  version: 1.0.0
servers:
  - url: http://{{host}}
  - url: https://firebasestorage.googleapis.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Auth
  - name: Task
  - name: User
  - name: Memebrs
  - name: Chats
  - name: Ticket Activity
paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Aliyu Barnie
                email: aliyutimileyin2340@gmail.com
                password: secret
                role: manager
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: aliyutimileyin2340@gmail.com
                password: secret
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/verify:
    post:
      tags:
        - Auth
      summary: Verify Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: aliyutimileyin2340@gmail.com
                otp: '466781'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/auth/logout:
    get:
      tags:
        - Auth
      summary: Logout
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/task:
    get:
      tags:
        - Task
      summary: Get All Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: sortBy
          in: query
          schema:
            type: string
          example: desc
        - name: filterBy
          in: query
          schema:
            type: string
          example: inProgress
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/task/{taskId}:
    get:
      tags:
        - Task
      summary: Get Single Task
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Task
      summary: Delete Task
      parameters:
        - name: taskId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/task/:
    post:
      tags:
        - Task
      summary: Create Task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task_name: Test  4
                task_description: This is ask for user 43.
                assign_to_id: 1
                status: inProgress
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Task
      summary: Update all Task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                taskId: 2
                task_name: Test Task 2 Updated
                task_description: Updating tho is a test task for user 2 in which i updated.
                due_date: '2024-10-20T23:02:00.000Z'
                assign_to_id: 2
                status: open
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/user/:
    get:
      tags:
        - User
      summary: Get Users
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/user/activate/{userId}:
    patch:
      tags:
        - User
      summary: Activate User
      requestBody:
        content: {}
      parameters:
        - name: userId
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/user/role:
    patch:
      tags:
        - User
      summary: Update User role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: admin
                userId: 2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/user/deactivate/{userId}:
    patch:
      tags:
        - User
      summary: Deactivate User
      requestBody:
        content: {}
      parameters:
        - name: userId
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/members/tenants:
    get:
      tags:
        - Memebrs
      summary: Get All tenants
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/members/landlords:
    get:
      tags:
        - Memebrs
      summary: Get All Landlords
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chats/create:
    post:
      tags:
        - Chats
      summary: Create Chat Audio FIles
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                senderId:
                  type: integer
                  example: '1'
                receiverId:
                  type: integer
                  example: '2'
                files:
                  type: string
                  format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/chats/:
    get:
      tags:
        - Chats
      summary: Get Chat
      parameters:
        - name: senderId
          in: query
          schema:
            type: integer
          example: '1'
        - name: receiverId
          in: query
          schema:
            type: integer
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v0/b/asher-support-424117.appspot.com/o/chat-files/1_2/40e7a15d-5709-4e7c-bffe-9e67e1ac8529.png:
    get:
      tags:
        - Chats
      summary: Returned file
      description: testing returned file in chat
      parameters:
        - name: alt
          in: query
          schema:
            type: string
          example: media
        - name: token
          in: query
          schema:
            type: string
          example: a62818e0-2b93-4cd6-9616-34189a9b8246
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tickets/all:
    get:
      tags:
        - Ticket Activity
      summary: Get All tickets
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tickets/{ticketId}:
    get:
      tags:
        - Ticket Activity
      summary: Get Single Ticket
      parameters:
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tickets/ticket-activity/{ticketId}:
    get:
      tags:
        - Ticket Activity
      summary: Get All ticket Activity
      parameters:
        - name: ticketId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tickets/ticket-activity/create:
    post:
      tags:
        - Ticket Activity
      summary: Create Ticket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ticketId: 1
                activity: Picked up the issue
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tickets/ticket-activity/update/{ticketId}:
    patch:
      tags:
        - Ticket Activity
      summary: Update Ticket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                activity: Requested for doc files from tenant
      parameters:
        - name: ticketId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}